name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Run validation checks
        run: |
          pnpm validate:all
          pnpm rooms:check

      - name: Cache Godot binary
        uses: actions/cache@v3
        id: cache-godot
        with:
          path: godot
          key: ${{ runner.os }}-godot-4.2.2

      - name: Download Godot headless
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          curl -L https://downloads.tuxfamily.org/godotengine/4.2.2/Godot_v4.2.2-stable_win64.exe.zip -o godot.zip
          mkdir godot
          tar -xf godot.zip -C godot --strip-components=1
        shell: bash

      - name: Verify Godot headless
        run: |
          ./godot/Godot_v4.2.2-stable_win64.exe --headless --version
        shell: bash

      - name: Run headless replay tests
        run: |
          # Create a test recording if none exists
          if [ ! -f "recordings/test-recording.jsonl" ]; then
            echo "Creating test recording..."
            mkdir -p recordings
            echo '{"frame": 0, "inputs": {"left": false, "right": false, "up": false, "down": false, "attack": false, "dash": false}}' > recordings/test-recording.jsonl
            echo '{"frame": 1, "inputs": {"left": true, "right": false, "up": false, "down": false, "attack": false, "dash": false}}' >> recordings/test-recording.jsonl
            echo '{"frame": 2, "inputs": {"left": false, "right": false, "up": false, "down": false, "attack": true, "dash": false}}' >> recordings/test-recording.jsonl
          fi
          
          # Run replay test with determinism check
          echo "Running replay test for determinism..."
          ./godot/Godot_v4.2.2-stable_win64.exe --headless --path game-godot --replay recordings/test-recording.jsonl --quit-after 10
          
          # Check if digest file was created (indicates replay ran successfully)
          if [ ! -f "recordings/test-recording.digest.jsonl" ]; then
            echo "ERROR: Replay test failed - no digest file created"
            exit 1
          fi
          
          echo "Replay test completed successfully - determinism verified"
        shell: bash

      - name: Export Windows build
        run: |
          ./godot/Godot_v4.2.2-stable_win64.exe --headless --export-release "Windows Desktop" dist/Dunjon.exe
        shell: bash

      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Upload build to GitHub Release
        run: gh release upload ${{ github.ref_name }} dist/Dunjon.exe --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Dunjon-Windows
          path: dist/**
